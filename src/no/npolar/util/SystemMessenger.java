package no.npolar.util;

import java.util.Date;
import javax.servlet.ServletContext;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.opencms.file.CmsObject;
import org.opencms.jsp.CmsJspActionElement;
//import org.opencms.mail.CmsMailSettings;
//import org.opencms.mail.CmsSimpleMail;
import org.opencms.main.OpenCms;

/**
 * Facilitates easy sending of notification emails about system errors etc.
 * 
 * @author Paul-Inge Flakstad, Norwegian Polar Institute <flakstad at npolar.no>
 */
public class SystemMessenger {
    /** The logger. */
    private static final Log LOG = LogFactory.getLog(no.npolar.util.SystemMessenger.class);
    
    public static int DEFAULT_INTERVAL = 1000*60*60*12; // 12 hours
    
    /**
     * Sends a standard "Error on web page at ..." message.
     * 
     * @param interval The minimum time, in milliseconds, that should pass before sending a new error notification. Pass -1 to use {@link #DEFAULT_INTERVAL}.
     * @param intervalAttributeName The name of the attribute (within the given application) used to store the timestamp for when the last error notification was sent. 
     * @param app The application, typically the <code>application</code> variable that is implicitly available in JSP files.
     * @param cms Properly initialized CMS action element. Used to determine the request URI, the locale etc.
     * @param to The email address(es) to send to.
     * @param from The email address to use as the sender. Can be <code>null</code>, in which case the configured standard email address is used.
     * @param subjectAddon Optional add-on to the standard subject. Use this e.g. to provide details on what page/service is affected.
     */
    public static void sendStandardError(int interval, String intervalAttributeName, ServletContext app, CmsJspActionElement cms, String to, String from, String subjectAddon) {
        
        CmsObject cmso = cms.getCmsObject();
        String requestFileUri = cms.getRequestContext().getUri();
        String pageUri = OpenCms.getLinkManager().getOnlineLink(cmso, requestFileUri) 
                        + (cms.getRequest().getQueryString() != null ? "?".concat(cms.getRequest().getQueryString()) : "");
        
        // Send error message
        try {
            String lastErrorNotificationTimestampName = intervalAttributeName; // E.g. "last_err_notification_projects";
            int errorNotificationTimeout = interval == -1 ? DEFAULT_INTERVAL : interval;
            
            String errorNotificationTimeoutString = "" + errorNotificationTimeout + " millisecond(s)";
            if (errorNotificationTimeout >= 1000*60*60*24) {
                errorNotificationTimeoutString = "" + errorNotificationTimeout/(1000*60*60*24) + " day(s)";
            } else if (errorNotificationTimeout >= 1000*60*60) {
                errorNotificationTimeoutString = "" + errorNotificationTimeout/(1000*60*60) + " hour(s)";
            } else if (errorNotificationTimeout >= 1000*60) {
                errorNotificationTimeoutString = "" + errorNotificationTimeout/(1000*60) + " minute(s)";
            } else if (errorNotificationTimeout >= 1000) {
                errorNotificationTimeoutString = "" + errorNotificationTimeout/(1000) + " second(s)";
            }
            
            Date lastErrorNotificationTimestamp = (Date)app.getAttribute(lastErrorNotificationTimestampName);
            if (lastErrorNotificationTimestamp == null // No previous error
                    || (lastErrorNotificationTimestamp.getTime() + errorNotificationTimeout) < new Date().getTime()) { // Previous error sent, but timeout exceeded
                app.setAttribute(lastErrorNotificationTimestampName, new Date());
                
                String mailSubject = "Error on web page" 
                        + (subjectAddon != null && !subjectAddon.isEmpty() ? (": ".concat(subjectAddon)) : "");
                String mailMessage = "The web page at " + pageUri + " is not functioning correctly, and might possibly be completely down."
                        + "\n\nPlease look into this."
                        + "\n\nLikely causes:"
                        + "\n - Error in the template that renders the page."
                        + "\n - Error in a script or other asset included on the page."
                        + "\n - Error communicating with the Data Centre: Its API may be down, unresponsive, or it did not respond as expected."
                        + "\n\nThis notification was generated by the CMS. No further notifications like this will be sent for the next " + errorNotificationTimeoutString + ".";
                /*
                // This method no longer works, after 2016-08/09 mail server changes
                CmsSimpleMail errorMail = new CmsSimpleMail();
                errorMail.addTo(to);
                if (from != null && !from.isEmpty()) {
                    errorMail.setFrom(from);
                }
                errorMail.setSubject(mailSubject);
                errorMail.setMsg(mailMessage);
                errorMail.send();
                //*/
                
                // BEGIN new routine
                SystemMail errorMail = new SystemMail();
                errorMail.setSubject(mailSubject);
                errorMail.setMessage(mailMessage);
                errorMail.setToAddr(to);
                errorMail.send();
                // END new routine
            }
        } catch (Exception e) { 
            if (LOG.isErrorEnabled()) {
                LOG.error("Sending notification email about an error on the page at '" + pageUri + "' failed.", e);
            }
        }
    }
}
